#!/command/with-contenv bash
#shellcheck shell=bash disable=SC1091

source /scripts/common
trap 'pkill -P $$ || true; exit 0' SIGTERM SIGINT SIGHUP SIGQUIT

s6wrap=(s6wrap --quiet --prepend="$(basename "$0")" --timestamps --args)

# Add a beast listener
AIRSPY_ADSB_CMD=("-l" "30005:Beast")

# Handle "-s"
if [[ -n "$AIRSPY_ADSB_SERIAL" ]]; then
    AIRSPY_ADSB_CMD+=("-s")
    AIRSPY_ADSB_CMD+=("${AIRSPY_ADSB_SERIAL}")
fi

# Handle "-t"
if [[ -n "$AIRSPY_ADSB_TIMEOUT" ]]; then
    AIRSPY_ADSB_CMD+=("-t")
    AIRSPY_ADSB_CMD+=("${AIRSPY_ADSB_TIMEOUT}")
fi

# Handle "-g"
if [[ -n "$AIRSPY_ADSB_RF_GAIN" ]]; then
    AIRSPY_ADSB_CMD+=("-g")
    AIRSPY_ADSB_CMD+=("${AIRSPY_ADSB_RF_GAIN}")
fi

# Handle "-f"
if [[ -n "$AIRSPY_ADSB_FEC_BITS" ]]; then
    AIRSPY_ADSB_CMD+=("-f")
    AIRSPY_ADSB_CMD+=("${AIRSPY_ADSB_FEC_BITS}")
fi

# Handle "-e"
if [[ -n "$AIRSPY_ADSB_PREAMBLE_FILTER" ]]; then
    AIRSPY_ADSB_CMD+=("-e")
    AIRSPY_ADSB_CMD+=("${AIRSPY_ADSB_PREAMBLE_FILTER}")
fi

# Handle "-C"
if [[ -n "$AIRSPY_ADSB_CPUTIME_TARGET" ]]; then
    AIRSPY_ADSB_CMD+=("-C")
    AIRSPY_ADSB_CMD+=("${AIRSPY_ADSB_CPUTIME_TARGET}")
fi

# Handle "-E"
if [[ -n "$AIRSPY_ADSB_PREAMBLE_FILTER_MAX" ]]; then
    AIRSPY_ADSB_CMD+=("-E")
    AIRSPY_ADSB_CMD+=("${AIRSPY_ADSB_PREAMBLE_FILTER_MAX}")
fi

# Handle "-P"
if [[ -n "$AIRSPY_ADSB_PREAMBLE_FILTER_NONCRC" ]]; then
    AIRSPY_ADSB_CMD+=("-P")
    AIRSPY_ADSB_CMD+=("${AIRSPY_ADSB_PREAMBLE_FILTER_NONCRC}")
fi

# Handle "-w"
if [[ -n "$AIRSPY_ADSB_WHITELIST_THRESHOLD" ]]; then
    AIRSPY_ADSB_CMD+=("-w")
    AIRSPY_ADSB_CMD+=("${AIRSPY_ADSB_WHITELIST_THRESHOLD}")
fi

# Handle "-m"
if [[ -n "$AIRSPY_ADSB_MLAT_FREQ" ]]; then
    AIRSPY_ADSB_CMD+=("-m")
    AIRSPY_ADSB_CMD+=("${AIRSPY_ADSB_MLAT_FREQ}")
fi

# Handle "-n"
if chk_enabled "${AIRSPY_ADSB_VERBATIM_MODE}"; then
    AIRSPY_ADSB_CMD+=("-n")
fi

# Handle "-x"
if chk_enabled "${AIRSPY_ADSB_DX_MODE}"; then
    AIRSPY_ADSB_CMD+=("-x")
fi

# Handle "-r"
if chk_enabled "${AIRSPY_ADSB_REDUCE_IF_BW}"; then
    AIRSPY_ADSB_CMD+=("-r")
fi

# Handle "-R"
if [[ -n "$AIRSPY_ADSB_RSSI_MODE" ]]; then
    AIRSPY_ADSB_CMD+=("-R")
    AIRSPY_ADSB_CMD+=("${AIRSPY_ADSB_RSSI_MODE}")
fi

# Handle "-D"
if [[ -n "$AIRSPY_ADSB_IGNORE_DF_TYPES" ]]; then
    AIRSPY_ADSB_CMD+=("-D")
    AIRSPY_ADSB_CMD+=("${AIRSPY_ADSB_IGNORE_DF_TYPES}")
fi

# Handle "-b"
if chk_enabled "${AIRSPY_ADSB_BIAS_TEE}"; then
    AIRSPY_ADSB_CMD+=("-b")
fi

# Handle "-p"
if chk_enabled "${AIRSPY_ADSB_BIT_PACKING}"; then
    AIRSPY_ADSB_CMD+=("-p")
fi

# Handle "-v"
if chk_enabled "${AIRSPY_ADSB_VERBOSE}"; then
    AIRSPY_ADSB_CMD+=("-v")
fi

# Handle "-S"
if chk_enabled "${AIRSPY_ADSB_STATS}"; then
    AIRSPY_ADSB_CMD+=("-S" "/run/airspy_adsb/stats.json")
fi

# Handle architecture
if [[ -z "$AIRSPY_ADSB_ARCH" ]]; then

    "${s6wrap[@]}" echo "Autodetecting architecture."

    # Determine which architecture binary is supported, else fail.
    if /usr/local/bin/airspy_adsb.arm64 -h > /dev/null 2>&1; then
        AIRSPY_ADSB_ARCH="arm64"

    elif /usr/local/bin/airspy_adsb.armv7 -h > /dev/null 2>&1; then
        AIRSPY_ADSB_ARCH="armv7"

    elif /usr/local/bin/airspy_adsb.arm -h > /dev/null 2>&1; then
        AIRSPY_ADSB_ARCH="arm"

    elif /usr/local/bin/airspy_adsb.nehalem -h > /dev/null 2>&1; then
        AIRSPY_ADSB_ARCH="nehalem"

    elif /usr/local/bin/airspy_adsb.x86_64 -h > /dev/null 2>&1; then
        AIRSPY_ADSB_ARCH="x86_64"

    elif /usr/local/bin/airspy_adsb.i386 -h > /dev/null 2>&1; then
        AIRSPY_ADSB_ARCH="i386"

    else
        "${s6wrap[@]}" echo "ERROR: Unsupported architecture: $(uname -m)!"
        exec sleep infinity
    fi
fi

# Specify binary path
AIRSPY_ADSB_BIN="/usr/local/bin/airspy_adsb.${AIRSPY_ADSB_ARCH}"

# Ensure binary exists
if [[ ! -x "$AIRSPY_ADSB_BIN" ]]; then
    "${s6wrap[@]}" echo "ERROR: Executable binary not found for architecture: $AIRSPY_ADSB_ARCH!"
    exec sleep infinity
fi

# Ensure binary runnable
if ! "$AIRSPY_ADSB_BIN" -h > /dev/null 2>&1; then
    "${s6wrap[@]}" echo "ERROR: Executable $AIRSPY_ADSB_ARCH binary not supported on $(uname -m) architecture!"
    exec sleep infinity
fi

# Execute binary with arguments prepared above
"${s6wrap[@]}" echo "Running $AIRSPY_ADSB_ARCH binary on $(uname -m) architecture."
"${s6wrap[@]}" echo "Running: ${AIRSPY_ADSB_BIN} ${AIRSPY_ADSB_CMD[*]}"

# Slow down restarts
sleep 10 &

#shellcheck disable=SC2016
"${s6wrap[@]}" "${AIRSPY_ADSB_BIN}" "${AIRSPY_ADSB_CMD[@]}" &

# trap will only work properly while the shell is running / waiting, not while another program is being foreground executed
wait || true
